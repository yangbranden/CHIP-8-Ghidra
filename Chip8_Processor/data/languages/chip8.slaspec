define endian=big;
define alignment=2;

## Address spaces
# CHIP-8 address space is 4096 bytes, so 2-byte addresses
define space ram        type=ram_space      size=2  default;
define space register   type=register_space size=1;

## Registers
# General purpose registers (16 8-bit)
define register offset=0x00 size=1 [ V0 V1 V2 V3 V4 V5 V6 V7 V8 V9 VA VB VC VD VE VF ];
# 16-bit registers (stack pointer, program counter, index register)
define register offset=0x10 size=2 [ SP PC I ];
# Other 8-bit registers (timer registers)
define register offset=0x14 size=1 [ DT ST ];


## Instruction format
# All CHIP-8 instructions are 2 bytes
define token instr (16)
    opcode_full = (0,15)        # The full 16-bit instruction (some instructions interpret all)
    opcode      = (12,15)       # Opcode: Highest 4 bits
    nnn         = (0,11)        # nnn or addr: A 12-bit value, the lowest 12 bits of the instruction
    n           = (0,3)         # n or nibble: A 4-bit value, the lowest 4 bits of the instruction
    Vx           = (8,11)       # x: A 4-bit value, the lower 4 bits of the high byte of the instruction
    Vy           = (4,7)        # y: A 4-bit value, the upper 4 bits of the low byte of the instruction
    kk          = (0,7)         # kk or byte: An 8-bit value, the lowest 8 bits of the instruction
;

## Additional context
# Vx and Vy are used to refer to registers
attach variables [ Vx Vy ] [ V0 V1 V2 V3 V4 V5 V6 V7 V8 V9 VA VB VC VD VE VF ];

## Custom operations
# Ghidra does not know (nor does it need to know) about the implementation of these operations
define pcodeop clear_screen;    # clear the screen
define pcodeop rand;            # generate random number 0-255
define pcodeop get_key_press;   # get current key press
define pcodeop draw_sprite;     # draw sprite onto the screen

## Macros and Extra definitions
macro set_flag(value) {
    VF = value:1;
}

# Used for instruction skips; essentially acts as a global variable
inst_after: addr is epsilon [ addr = inst_next + 2; ] { 
    export *:2 addr;
}

## Instructions
# Following Cowgod's specification

# 0nnn - SYS addr; Jump to a machine code routine at addr
:SYS nnn is opcode=0x0 & nnn {
    local addr:2 = nnn;
    goto [addr];
}

# 00E0 - CLS; Clear the display
:CLS is opcode=0x0 & nnn=0x0E0 {
    clear_screen();
}

# 00EE - RET; Return from a subroutine
:RET is opcode_full=0x00EE {
	SP = SP - 2;
    local tmp:2 = *:2 SP;
	return [tmp];
}

# 1nnn - JP addr; Jump to location nnn
:JP nnn is opcode=0x1 & nnn {
    local addr:2 = nnn;
    goto [addr];
}

# 2nnn - CALL addr; Call subroutine at nnn
:CALL nnn is opcode=0x2 & nnn {
    *:2 SP = inst_next;
    SP = SP + 2;
    local addr:2 = nnn;
    call [addr];
}

# 3xkk - SE Vx, byte; Skip next instruction if Vx = kk
:SE Vx, kk is opcode=0x3 & Vx & kk & inst_after {
    if (Vx == kk) goto inst_after;
}

# 4xkk - SNE Vx, byte; Skip next instruction if Vx != kk
:SNE Vx, kk is opcode=0x4 & Vx & kk & inst_after {
    if (Vx != kk) goto inst_after;
}

# 5xy0 - SE Vx, Vy; Skip next instruction if Vx = Vy
:SE Vx, Vy is opcode=0x5 & Vx & Vy & n=0 & inst_after {
    if (Vx == Vy) goto inst_after;
}

# 6xkk - LD Vx, byte; Set Vx = kk
:LD Vx, kk is opcode=0x6 & Vx & kk {
    Vx = kk;
}

# 7xkk - ADD Vx, byte; Set Vx = Vx + kk
:ADD Vx, kk is opcode=0x7 & Vx & kk {
    Vx = Vx + kk;
}

# 8xy0 - LD Vx, Vy; Set Vx = Vy
:LD Vx, Vy is opcode=0x8 & Vx & Vy & n=0x0 {
    Vx = Vy;
}

# 8xy1 - OR Vx, Vy; Set Vx = Vx OR Vy
:OR Vx, Vy is opcode=0x8 & Vx & Vy & n=0x1 {
    Vx = Vx | Vy;
}

# 8xy2 - AND Vx, Vy; Set Vx = Vx AND Vy
:AND Vx, Vy is opcode=0x8 & Vx & Vy & n=0x2 {
    Vx = Vx & Vy;
}

# 8xy3 - XOR Vx, Vy; Set Vx = Vx XOR Vy
:XOR Vx, Vy is opcode=0x8 & Vx & Vy & n=0x3 {
    Vx = Vx ^ Vy;
}

# 8xy4 - ADD Vx, Vy; Set Vx = Vx + Vy, set VF = carry
:ADD Vx, Vy is opcode=0x8 & Vx & Vy & n=0x4 {
    Vx = Vx + Vy;
    local flag:1 = carry(Vx, Vy);
    set_flag(flag);
}

# 8xy5 - SUB Vx, Vy; Set Vx = Vx - Vy, set VF = NOT borrow
:SUB Vx, Vy is opcode=0x8 & Vx & Vy & n=0x5 {
    local flag:1 = Vx > Vy;
    set_flag(flag);
    Vx = Vx - Vy;
}

# 8xy6 - SHR Vx {, Vy}; Set Vx = Vx SHR 1
:SHR Vx, Vy is opcode=0x8 & Vx & Vy & n=0x6 {
    local flag:1 = Vx & 1;
    set_flag(flag);
    Vx = Vx >> 1;
}

# 8xy7 - SUBN Vx, Vy; Set Vx = Vy - Vx, set VF = NOT borrow
:SUBN Vx, Vy is opcode=0x8 & Vx & Vy & n=0x7 {
    local flag:1 = Vy > Vx;
    set_flag(flag);
    Vx = Vy - Vx;
}

# 8xyE - SHL Vx {, Vy}; Set Vx = Vx SHL 1
:SHL Vx, Vy is opcode=0x8 & Vx & Vy & n=0xE {
    local flag:1 = Vx & 1;
    set_flag(flag);
    Vx = Vx << 1;
}

# 9xy0 - SNE Vx, Vy; Skip next instruction if Vx != Vy
:SNE Vx, Vy is opcode=0x9 & Vx & Vy & n=0x0 & inst_after {
    if (Vx != Vy) goto inst_after;
}

# Annn - LD I, addr; Set I = nnn
:LD I, nnn is opcode=0xA & I & nnn {
    local addr:2 = nnn;
    I = addr;
}

# Bnnn - JP V0, addr; Jump to location nnn + V0
:JP V0, nnn is opcode=0xB & V0 & nnn {
    local addr:2 = zext(V0);
    addr = addr + nnn;
    goto [addr];
}

# Cxkk - RND Vx, byte; Set Vx = random byte AND kk
:RND Vx, kk is opcode=0xC & Vx & kk {
    local tmp:1 = rand() & kk;
    Vx = tmp;
}

# Dxyn - DRW Vx, Vy, nibble; Display n-byte sprite starting at memory location I at (Vx, Vy), set VF = collision
:DRW Vx, Vy, n is opcode=0xD & Vx & Vy & n {
    local flag:1 = draw_sprite(I:2, Vx:1, Vy:1, n:1);
    set_flag(flag);
}

# Ex9E - SKP Vx; Skip next instruction if key with the value of Vx is pressed
:SKP Vx is opcode=0xE & Vx & kk=0x9E & inst_after {
    local key_press:1 = get_key_press();
    if (key_press == Vx) goto inst_after;
}

# ExA1 - SKNP Vx; Skip next instruction if key with the value of Vx is not pressed
:SKNP Vx is opcode=0xE & Vx & kk=0xA1 & inst_after {
    local key_press:1 = get_key_press();
    if (key_press != Vx) goto inst_after;
}

# Fx07 - LD Vx, DT; Set Vx = delay timer value
:LD Vx, DT is opcode=0xF & Vx & DT & kk=0x07 {
    Vx = DT;
}

# Fx0A - LD Vx, K; Wait for a key press, store the value of the key in Vx
:LD Vx is opcode=0xF & Vx & kk=0x0A {
    local key_press:1 = get_key_press();
    Vx = key_press;
}

# Fx15 - LD DT, Vx; Set delay timer = Vx
:LD DT, Vx is opcode=0xF & DT & Vx & kk=0x15 {
    DT = Vx;
}

# Fx18 - LD ST, Vx; Set sound timer = Vx
:LD ST, Vx is opcode=0xF & ST & Vx & kk=0x18 {
    ST = Vx;
}

# Fx1E - ADD I, Vx; Set I = I + Vx
:ADD I, Vx is opcode=0xF & I & Vx & kk=0x1E {
    I = I + zext(Vx);
}

# Fx29 - LD F, Vx; Set I = location of sprite for digit Vx
:LD "F", Vx is opcode=0xF & Vx & kk=0x29 {
    local fontset_addr:2 = zext(Vx) * 5;
    I = fontset_addr;
}

# Fx33 - LD B, Vx; Store BCD representation of Vx in memory locations I, I+1, and I+2
:LD "B", Vx is opcode=0xF & Vx & kk=0x33 {
    local hundreds = Vx / 100;
    local tens = (Vx / 10) % 10;
    local ones = Vx % 10;

    *:1 I = hundreds;
    *:1 (I+1) = tens;
    *:1 (I+2) = ones;
}

# Fx55 - LD [I], Vx; Store registers V0 through Vx in memory starting at location I
:LD [I], V0 is opcode=0xF & I & Vx=0x0 & kk=0x55 & V0 {
    *:1 I = V0;
}
:LD [I], V1 is opcode=0xF & I & Vx=0x1 & kk=0x55 & V1 {
    *:1 I = V0;
    *:1 (I+1) = V1;
}
:LD [I], V2 is opcode=0xF & I &Vx=0x2 & kk=0x55 & V2 {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
}
:LD [I], V3 is opcode=0xF & I & Vx=0x3 & kk=0x55 & V3 {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
    *:1 (I+3) = V3;
}
:LD [I], V4 is opcode=0xF & I & Vx=0x4 & kk=0x55 & V4 {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
    *:1 (I+3) = V3;
    *:1 (I+4) = V4;
}
:LD [I], V5 is opcode=0xF & I & Vx=0x5 & kk=0x55 & V5 {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
    *:1 (I+3) = V3;
    *:1 (I+4) = V4;
    *:1 (I+5) = V5;
}
:LD [I], V6 is opcode=0xF & I & Vx=0x6 & kk=0x55 & V6 {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
    *:1 (I+3) = V3;
    *:1 (I+4) = V4;
    *:1 (I+5) = V5;
    *:1 (I+6) = V6;
}
:LD [I], V7 is opcode=0xF & I & Vx=0x7 & kk=0x55 & V7 {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
    *:1 (I+3) = V3;
    *:1 (I+4) = V4;
    *:1 (I+5) = V5;
    *:1 (I+6) = V6;
    *:1 (I+7) = V7;
}
:LD [I], V8 is opcode=0xF & I & Vx=0x8 & kk=0x55 & V8 {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
    *:1 (I+3) = V3;
    *:1 (I+4) = V4;
    *:1 (I+5) = V5;
    *:1 (I+6) = V6;
    *:1 (I+7) = V7;
    *:1 (I+8) = V8;
}
:LD [I], V9 is opcode=0xF & I & Vx=0x9 & kk=0x55 & V9 {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
    *:1 (I+3) = V3;
    *:1 (I+4) = V4;
    *:1 (I+5) = V5;
    *:1 (I+6) = V6;
    *:1 (I+7) = V7;
    *:1 (I+8) = V8;
    *:1 (I+9) = V9;
}
:LD [I], VA is opcode=0xF & I & Vx=0xA & kk=0x55 & VA {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
    *:1 (I+3) = V3;
    *:1 (I+4) = V4;
    *:1 (I+5) = V5;
    *:1 (I+6) = V6;
    *:1 (I+7) = V7;
    *:1 (I+8) = V8;
    *:1 (I+9) = V9;
    *:1 (I+10) = VA;
}
:LD [I], VB is opcode=0xF & I & Vx=0xB & kk=0x55 & VB {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
    *:1 (I+3) = V3;
    *:1 (I+4) = V4;
    *:1 (I+5) = V5;
    *:1 (I+6) = V6;
    *:1 (I+7) = V7;
    *:1 (I+8) = V8;
    *:1 (I+9) = V9;
    *:1 (I+10) = VA;
    *:1 (I+11) = VB;
}
:LD [I], VC is opcode=0xF & I & Vx=0xC & kk=0x55 & VC {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
    *:1 (I+3) = V3;
    *:1 (I+4) = V4;
    *:1 (I+5) = V5;
    *:1 (I+6) = V6;
    *:1 (I+7) = V7;
    *:1 (I+8) = V8;
    *:1 (I+9) = V9;
    *:1 (I+10) = VA;
    *:1 (I+11) = VB;
    *:1 (I+12) = VC;
}
:LD [I], VD is opcode=0xF & I & Vx=0xD & kk=0x55 & VD {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
    *:1 (I+3) = V3;
    *:1 (I+4) = V4;
    *:1 (I+5) = V5;
    *:1 (I+6) = V6;
    *:1 (I+7) = V7;
    *:1 (I+8) = V8;
    *:1 (I+9) = V9;
    *:1 (I+10) = VA;
    *:1 (I+11) = VB;
    *:1 (I+12) = VC;
    *:1 (I+13) = VD;
}
:LD [I], VE is opcode=0xF & I & Vx=0xE & kk=0x55 & VE {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
    *:1 (I+3) = V3;
    *:1 (I+4) = V4;
    *:1 (I+5) = V5;
    *:1 (I+6) = V6;
    *:1 (I+7) = V7;
    *:1 (I+8) = V8;
    *:1 (I+9) = V9;
    *:1 (I+10) = VA;
    *:1 (I+11) = VB;
    *:1 (I+12) = VC;
    *:1 (I+13) = VD;
    *:1 (I+14) = VE;
}
:LD [I], VF is opcode=0xF & I & Vx=0xF & kk=0x55 & VF {
    *:1 I = V0;
    *:1 (I+1) = V1;
    *:1 (I+2) = V2;
    *:1 (I+3) = V3;
    *:1 (I+4) = V4;
    *:1 (I+5) = V5;
    *:1 (I+6) = V6;
    *:1 (I+7) = V7;
    *:1 (I+8) = V8;
    *:1 (I+9) = V9;
    *:1 (I+10) = VA;
    *:1 (I+11) = VB;
    *:1 (I+12) = VC;
    *:1 (I+13) = VD;
    *:1 (I+14) = VE;
    *:1 (I+15) = VF;
}


# Fx65 - LD Vx, [I]; Read registers V0 through Vx from memory starting at location I
:LD V0, [I] is opcode=0xF & Vx=0x0 & kk=0x65 & V0 & I {
    V0 = *:1 I;
}
:LD V1, [I] is opcode=0xF & Vx=0x1 & kk=0x65 & V1 & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
}
:LD V2, [I] is opcode=0xF & Vx=0x2 & kk=0x65 & V2 & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
}
:LD V3, [I] is opcode=0xF & Vx=0x3 & kk=0x65 & V3 & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
    V3 = *:1 (I+3);
}
:LD V4, [I] is opcode=0xF & Vx=0x4 & kk=0x65 & V4 & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
    V3 = *:1 (I+3);
    V4 = *:1 (I+4);
}
:LD V5, [I] is opcode=0xF & Vx=0x5 & kk=0x65 & V5 & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
    V3 = *:1 (I+3);
    V4 = *:1 (I+4);
    V5 = *:1 (I+5);
}
:LD V6, [I] is opcode=0xF & Vx=0x6 & kk=0x65 & V6 & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
    V3 = *:1 (I+3);
    V4 = *:1 (I+4);
    V5 = *:1 (I+5);
    V6 = *:1 (I+6);
}
:LD V7, [I] is opcode=0xF & Vx=0x7 & kk=0x65 & V7 & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
    V3 = *:1 (I+3);
    V4 = *:1 (I+4);
    V5 = *:1 (I+5);
    V6 = *:1 (I+6);
    V7 = *:1 (I+7);
}
:LD V8, [I] is opcode=0xF & Vx=0x8 & kk=0x65 & V8 & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
    V3 = *:1 (I+3);
    V4 = *:1 (I+4);
    V5 = *:1 (I+5);
    V6 = *:1 (I+6);
    V7 = *:1 (I+7);
    V8 = *:1 (I+8);
}
:LD V9, [I] is opcode=0xF & Vx=0x9 & kk=0x65 & V9 & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
    V3 = *:1 (I+3);
    V4 = *:1 (I+4);
    V5 = *:1 (I+5);
    V6 = *:1 (I+6);
    V7 = *:1 (I+7);
    V8 = *:1 (I+8);
    V9 = *:1 (I+9);
}
:LD VA, [I] is opcode=0xF & Vx=0xA & kk=0x65 & VA & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
    V3 = *:1 (I+3);
    V4 = *:1 (I+4);
    V5 = *:1 (I+5);
    V6 = *:1 (I+6);
    V7 = *:1 (I+7);
    V8 = *:1 (I+8);
    V9 = *:1 (I+9);
    VA = *:1 (I+10);
}
:LD VB, [I] is opcode=0xF & Vx=0xB & kk=0x65 & VB & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
    V3 = *:1 (I+3);
    V4 = *:1 (I+4);
    V5 = *:1 (I+5);
    V6 = *:1 (I+6);
    V7 = *:1 (I+7);
    V8 = *:1 (I+8);
    V9 = *:1 (I+9);
    VA = *:1 (I+10);
    VB = *:1 (I+11);
}
:LD VC, [I] is opcode=0xF & Vx=0xC & kk=0x65 & VC & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
    V3 = *:1 (I+3);
    V4 = *:1 (I+4);
    V5 = *:1 (I+5);
    V6 = *:1 (I+6);
    V7 = *:1 (I+7);
    V8 = *:1 (I+8);
    V9 = *:1 (I+9);
    VA = *:1 (I+10);
    VB = *:1 (I+11);
    VC = *:1 (I+12);
}
:LD VD, [I] is opcode=0xF & Vx=0xD & kk=0x65 & VD & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
    V3 = *:1 (I+3);
    V4 = *:1 (I+4);
    V5 = *:1 (I+5);
    V6 = *:1 (I+6);
    V7 = *:1 (I+7);
    V8 = *:1 (I+8);
    V9 = *:1 (I+9);
    VA = *:1 (I+10);
    VB = *:1 (I+11);
    VC = *:1 (I+12);
    VD = *:1 (I+13);
}
:LD VE, [I] is opcode=0xF & Vx=0xE & kk=0x65 & VE & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
    V3 = *:1 (I+3);
    V4 = *:1 (I+4);
    V5 = *:1 (I+5);
    V6 = *:1 (I+6);
    V7 = *:1 (I+7);
    V8 = *:1 (I+8);
    V9 = *:1 (I+9);
    VA = *:1 (I+10);
    VB = *:1 (I+11);
    VC = *:1 (I+12);
    VD = *:1 (I+13);
    VE = *:1 (I+14);
}
:LD VF, [I] is opcode=0xF & Vx=0xF & kk=0x65 & VF & I {
    V0 = *:1 I;
    V1 = *:1 (I+1);
    V2 = *:1 (I+2);
    V3 = *:1 (I+3);
    V4 = *:1 (I+4);
    V5 = *:1 (I+5);
    V6 = *:1 (I+6);
    V7 = *:1 (I+7);
    V8 = *:1 (I+8);
    V9 = *:1 (I+9);
    VA = *:1 (I+10);
    VB = *:1 (I+11);
    VC = *:1 (I+12);
    VD = *:1 (I+13);
    VE = *:1 (I+14);
    VF = *:1 (I+15);
}
